# -*- coding: utf-8 -*-
"""MathHW5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nV2DfIZMGtUI2C3QZCG4SCnaPErr_37G
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
from collections import Counter
import math
import itertools

"""1. Напишите код, моделирующий выпадение поля в рулетке (с учетом поля зеро)."""

for i in range (0,10):
  a=input()
  x = np.random.randint(0,37)
  print(x)

"""2.1. Напишите код, проверяющий любую из теорем сложения или умножения вероятности на примере рулетки или подбрасывания монетки."""

xarr = []
for i in range (0,10000):
  x = np.random.randint(0,37)
  xarr.append(x)
# print(xarr)
np.sum(list(Counter(xarr).values()))

"""2.2.Сгенерируйте десять выборок случайных чисел х0, …, х9.
и постройте гистограмму распределения случайной суммы х0+х1+ …+ х9.
"""

sumarr =[]
for i in range (0,10):
  xarr = np.random.rand(10)
  sumarr.append(np.sum(xarr))
plt.hist(sumarr)
plt.xlabel('x')
plt.ylabel('frequency')
plt.title('Histogram')

"""3.1. Дополните код Монте-Карло последовательности независимых испытаний расчетом соответствующих вероятностей (через биномиальное распределение) 
и сравните результаты.
"""

k,n = 0,10000
a = np.random.randint(0,2,n)
b = np.random.randint(0,2,n)
c = np.random.randint(0,2,n)
d = np.random.randint(0,2,n)
x = a+b+c+d
for i in range(0,n):
  if x[i] ==2:
    k=k+1
print(a,b,c,d)
print(x)
print(k,n,k/n)
# Вероятность 2 успехов из четырех испытаний
comb = math.factorial(4)/(math.factorial(2)*math.factorial(2))
p = comb/2**4
print(p)

"""3.2. Повторите расчеты биномиальных коэффициентов и вероятностей k успехов в последовательности из n независимых испытаний, взяв другие значения n и k."""

k,n = 0,10000
a = np.random.randint(0,2,n)
b = np.random.randint(0,2,n)
c = np.random.randint(0,2,n)
d = np.random.randint(0,2,n)
e = np.random.randint(0,2,n)
f = np.random.randint(0,2,n)
g = np.random.randint(0,2,n)
x = a+b+c+d+e+f+g
for i in range(0,n):
  if x[i] ==3:
    k=k+1
print(a,b,c,d)
print(x)
print(k,n,k/n)

comb = math.factorial(7)/(math.factorial(3)*math.factorial(4))
p = comb/2**7
print(p)

"""4.Из урока по комбинаторике повторите расчеты, сгенерировав возможные варианты перестановок для других значений n и k"""

for p in itertools.permutations("01347",3):
  print(''.join(str(x) for x in p))

for p in itertools.combinations("01347",3):
  print(''.join(str(x) for x in p))

"""5.Дополните код расчетом коэффициента корреляции x и y"""

n=100
r=0.7
x=np.random.rand(n)
y=r*x+ (1-r)*np.random.rand(n)
plt.plot(x,y,'o')
plt.xlabel('x')
plt.ylabel('y')
plt.grid(True)

a= (np.sum(x)*np.sum(y) - n*np.sum(x*y))/(np.sum(x)*np.sum(x) - n*np.sum(x*x))
b = (np.sum(y) - a*np.sum(x))/n

A = np.vstack([x, np.ones(len(x))]).T
a1,b1 = np.linalg.lstsq(A,y)[0]

print(a,b)
print(a1,b1)

prod1 =[]
xdsq =[]
ydsq=[]
xm = np.mean(x)
ym = np.mean(y)
for i in (0,n-1):
  xd = x[i]-xm
  yd = y[i]-ym
  prod1.append(xd*yd)
  xdsq.append(xd**2)
  ydsq.append(yd**2)
r=np.sum(prod1)/np.sqrt(np.sum(xdsq)*np.sum(xdsq))

print(r)

plt.plot([0,1],[b,a+b])
plt.show()